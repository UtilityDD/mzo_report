<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Performance Index</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <style>
    body {
      background: #fafbfc;
      font-family: 'Inter', system-ui, -apple-system, sans-serif;
    }
    .card {
      border: none;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.05);
      margin-bottom: 1.5rem;
    }
    .card-header {
      border-radius: 8px 8px 0 0 !important;
      font-weight: 600;
      padding: 0.5rem 0.7rem;
    }
    .card-header .fa-chevron-down {
      transition: transform 0.3s;
    }
    .card-header.collapsed .fa-chevron-down {
      transform: rotate(-90deg);
    }
    .top-performer {
      background-color: #d1e7dd !important;
      color: #0f5132;
    }
    .bottom-performer {
      background-color: #f8d7da !important;
      color: #842029;
    }
    .top-rank {
      background-color: #fff4de !important;
      color: #664d03;
      font-weight: 600;
    }
    .trophy-gold {
      color: #FFD700;
    }
    .trophy-silver {
      color: #C0C0C0;
    }
    .trophy-bronze {
      color: #CD7F32;
    }
    .nav-tabs .nav-link {
      border: none;
      color: #6c757d;
      font-weight: 500;
      padding: 0.75rem 1rem;
    }
    .nav-tabs .nav-link.active {
      color: #0d6efd;
      border-bottom: 2px solid #0d6efd;
      background: transparent;
    }
    .table {
      margin-bottom: 0;
    }
    .table thead th {
      background-color: #f8f9fa;
      font-weight: 600;
      color: #495057;
      border-top: none;
    }
    .table td, .table th {
      padding: 0.3rem 0.5rem;
      vertical-align: middle;
      font-size: 0.875rem;
      line-height: 1.2;
    }
    .container {
      max-width: 1140px;
    }
    h2 {
      font-weight: 700;
      color: #212529;
      margin-bottom: 1.5rem;
    }
    .loading {
      display: flex;
      justify-content: center;
      padding: 3rem 0;
    }
    .tab-content {
      margin-top: 1.0rem;
    }
    @media (max-width: 576px) {
      .table td, .table th {
        padding: 0.2rem;
        font-size: 0.8rem;
      }
    }
    .table-responsive {
      max-height: 300px;
      overflow-y: auto;
    }
    .table thead th {
      position: sticky;
      top: 0;
      background: #f8f9fa;
      z-index: 10;
    }
    .icon-red-circle {
      display: inline-block;
      width: 0.75em;
      height: 0.75em;
      background-color: red;
      border-radius: 50%;
      margin-right: 0.5em;
    }
  </style>
</head>
<body>
<div class="container py-4">
  <h2 class="text-center mb-4">Performance Index</h2>

  <!-- Tabs -->
  <ul class="nav nav-tabs" id="dataTabs" role="tablist">
    <li class="nav-item">
      <button class="nav-link active" id="region-tab" data-bs-toggle="tab" data-bs-target="#region" type="button" role="tab">
        <i class="fas fa-map-marked-alt me-2"></i>Region
      </button>
    </li>
    <li class="nav-item">
      <button class="nav-link" id="division-tab" data-bs-toggle="tab" data-bs-target="#division" type="button" role="tab">
        <i class="fas fa-chart-pie me-2"></i>Division
      </button>
    </li>
    <li class="nav-item">
      <button class="nav-link" id="ccc-tab" data-bs-toggle="tab" data-bs-target="#ccc" type="button" role="tab">
        <i class="fas fa-building me-2"></i>CCC
      </button>
    </li>
  </ul>

  <!-- Content per Tab -->
  <div class="tab-content" id="tabContent">
    <div class="tab-pane fade show active" id="region" role="tabpanel">
      <div id="accordion-region" class="mt-3">
        <div class="loading">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
      </div>
    </div>
    <div class="tab-pane fade" id="division" role="tabpanel">
      <div id="accordion-division" class="mt-3">
        <div class="loading">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
      </div>
    </div>
    <div class="tab-pane fade" id="ccc" role="tabpanel">
      <div id="accordion-ccc" class="mt-3">
        <div class="loading">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js"></script>
<script>
const NSC_URL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vRsUU2viBvYhSgR0RFwmZ1H8LkYCats9roQVCKvQeoU7dzg6ryR6IWZex9FT9tksp_DEM23ZgQ28Iyo/pub?output=csv";
const MASTERCARD_URL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vQmOUW4jxUtEGWhPHaoNBsvpBcGzhHJZRUx_9mxFBp91sfg4yD8WIqIK_xv0vlFs2yP-Ljz09JW1U2c/pub?gid=0&single=true&output=csv";

const cards = [
  { 
    title: "Pending NSC/ non-pole case", 
    icon: "fa-clipboard-list",
    source: "nsc", 
    key: d => (!d.NO_OF_POLES || d.NO_OF_POLES.trim() === "0"), 
    label: "SUPP_OFF" 
  },
  { 
    title: "Pending NSC /Pole Case", 
    icon: "fa-tree", 
    source: "nsc", 
    key: d => (d.NO_OF_POLES && d.NO_OF_POLES.trim() !== "0"), 
    label: "SUPP_OFF" 
  },
  { 
    title: "Industrial Pending NSC", 
    icon: "fa-industry",
    source: "nsc", 
    key: d => (d.CONN_CLASS?.trim().toUpperCase() === "I"), 
    label: "SUPP_OFF" 
  },
  { 
    title: "3-Ph Commercial Pending NSC", 
    icon: "fa-store",
    source: "nsc", 
    key: d => (d.CONN_CLASS?.trim().toUpperCase() === "A" && d.APPLIED_PHASE?.trim().toUpperCase() === "III"), 
    label: "SUPP_OFF" 
  },
  { 
    title: "NSC:Live from Withheld", 
    icon: "fa-pause-circle",
    source: "nsc", 
    key: d => (d.SCN_WITHELD_DATE && d.SCN_WITHELD_DATE.trim() !== ""), 
    label: "SUPP_OFF" 
  },
  { 
    title: "Pending Mastercard >3 months", 
    icon: "fa-credit-card",
    source: "mastercard", 
    key: row => {
      const installDate = parseDate(row["Meter Installation Date"]);
      const reportDate = parseDate(row["Report Date"]);
      return installDate && reportDate && ((reportDate - installDate) / (1000 * 60 * 60 * 24)) >= 90;
    }, 
    label: "CCC" 
  },
  {
    title: "Average Delay for Quotation",
    icon: "fa-clock",
    source: "nsc",
    key: d => parseFloat(d.DelayInQtn) > 0,
    label: "SUPP_OFF",
    delayField: "DelayInQtn",
    isAverage: true
  },
  {
    title: "Average Delay for WO",
    icon: "fa-file-contract",
    source: "nsc",
    key: d => parseFloat(d.DelayInWO) > 0,
    label: "SUPP_OFF",
    delayField: "DelayInWO",
    isAverage: true
  },
  {
    title: "Average Delay for Connection",
    icon: "fa-plug",
    source: "nsc",
    key: d => parseFloat(d.DelayInSC) > 0,
    label: "SUPP_OFF",
    delayField: "DelayInSC",
    isAverage: true
  }
];

const state = { nsc: [], mastercard: [] };

async function loadData() {
  try {
    const [nscText, masterText] = await Promise.all([
      fetch(NSC_URL).then(r => r.text()),
      fetch(MASTERCARD_URL).then(r => r.text())
    ]);
    
    state.nsc = Papa.parse(nscText, { header: true }).data.filter(row => Object.keys(row).length > 1);
    state.mastercard = Papa.parse(masterText, { header: true }).data.filter(row => Object.keys(row).length > 1);
    
    // Remove loading indicators
    document.querySelectorAll('.loading').forEach(el => el.remove());
    
    // Render all tabs
    ['region', 'division', 'ccc'].forEach(createAccordion);
  } catch (error) {
    console.error("Error loading data:", error);
    document.querySelectorAll('.loading').forEach(el => {
      el.innerHTML = `<div class="alert alert-danger">Error loading data. Please try again later.</div>`;
    });
  }
}

function parseDate(str) {
  if (!str) return null;
  const parts = str.match(/^(\d{1,2})[-/](\d{1,2})[-/](\d{2,4})/);
  if (!parts) return null;
  return new Date(`${parts[3].length === 2 ? "20" + parts[3] : parts[3]}-${parts[2]}-${parts[1]}`);
}

function groupAndRank(data, keyField) {
  const group = {};
  data.forEach(row => {
    const key = row[keyField] || "Unknown";
    if (key.trim() !== "") {
      group[key] = (group[key] || 0) + 1;
    }
  });
  
  // Sort by count (descending - highest values first)
  const sortedEntries = Object.entries(group)
    .sort((a, b) => b[1] - a[1]);
  
  // Assign ranks in reverse (highest rank = highest count)
  const totalEntries = sortedEntries.length;
  return sortedEntries.map(([office, value], i) => ({ 
    rank: totalEntries - i,  // Highest count gets highest rank number
    office, 
    value 
  }));
}

function renderTable(rows, tabType = '') {
  const totalCount = rows.reduce((sum, row) => sum + row.value, 0);
  const totalRows = rows.length;

  // Determine how many bottom performers get red dots
  const redHighlightCount = tabType === 'division' ? 2 : tabType === 'ccc' ? 5 : 0;

  // Extract top 3 trophy holders sorted by rank
  const trophyRows = rows.filter(r => r.rank <= 3).sort((a, b) => a.rank - b.rank);
  const otherRows = rows.filter(r => r.rank > 3);

  const renderRow = (r, i, isTrophy = false) => {
    let iconHtml = '', rowClass = '';
    let displayRank = isTrophy ? i + 1 : r.rank;

    if (isTrophy) {
      // Trophy icons
      if (displayRank === 1) {
        iconHtml = '<i class="fas fa-trophy trophy-gold me-2"></i>';
        rowClass = 'top-rank';
      } else if (displayRank === 2) {
        iconHtml = '<i class="fas fa-trophy trophy-silver me-2"></i>';
        rowClass = 'top-rank';
      } else if (displayRank === 3) {
        iconHtml = '<i class="fas fa-trophy trophy-bronze me-2"></i>';
        rowClass = 'top-rank';
      }
    } else {
      // Red circle for bottom performers
      if (redHighlightCount > 0 && r.rank > totalRows - redHighlightCount) {
        iconHtml = '<span class="icon-red-circle"></span>';
        rowClass = 'bottom-performer';
      } else if (r.rank <= 10) {
        rowClass = 'top-performer';
      }
    }

    const percentage = ((r.value / totalCount) * 100).toFixed(1);

    return `<tr class="${rowClass}">
      <td class="text-end">${iconHtml}${displayRank}</td>
      <td>${r.office}</td>
      <td class="text-end">${r.value}</td>
      <td class="text-end">${percentage}%</td>
    </tr>`;
  };

  return `
  <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
    <table class="table table-hover table-sm mt-2">
      <thead style="position: sticky; top: 0; background-color: #f8f9fa; z-index: 10;">
        <tr>
          <th class="text-end" width="10%">Rank</th>
          <th>Office</th>
          <th class="text-end" width="15%">Count</th>
          <th class="text-end" width="15%">% of Total</th>
        </tr>
      </thead>
      <tbody>
        ${trophyRows.map((r, i) => renderRow(r, i, true)).join("")}
        ${otherRows.map(r => renderRow(r)).join("")}
      </tbody>
    </table>
  </div>`;
}

function createAccordion(tabType) {
  const container = document.getElementById(`accordion-${tabType}`);
  if (!container) return;
  
  container.innerHTML = '';
  
  cards.forEach((card, i) => {
    const collapseId = `${tabType}-collapse-${i}`;
    const headerId = `${tabType}-heading-${i}`;
    
    // Choose grouping field
    let groupKey = card.label;
    if (tabType === 'region') {
      groupKey = card.source === 'nsc' ? 'REGION' : 'Region';
    } else if (tabType === 'division') {
      groupKey = card.source === 'nsc' ? 'DIVN_NAME' : 'Division';
    } else if (tabType === 'ccc') {
      groupKey = card.label;
    }

    const filtered = state[card.source].filter(card.key);
    let ranked;

    // If it's a delay average card
    if (card.isAverage && card.delayField) {
      const delayGroups = {};
      filtered.forEach(d => {
        const groupVal = d[groupKey];
        const delay = parseFloat(d[card.delayField]);
        if (groupVal && !isNaN(delay) && delay > 0) {
          if (!delayGroups[groupVal]) delayGroups[groupVal] = [];
          delayGroups[groupVal].push(delay);
        }
      });

      ranked = Object.entries(delayGroups)
        .map(([office, delays]) => {
          const avg = delays.reduce((a, b) => a + b, 0) / delays.length;
          return { office, value: parseFloat(avg.toFixed(1)) };
        })
        .sort((a, b) => b.value - a.value)
        .map((entry, i, arr) => ({
          ...entry,
          rank: arr.length - i
        }));
    } else {
      ranked = groupAndRank(filtered, groupKey);
    }
    
    // Only show cards with data
    if (ranked.length === 0) return;

    const tableHTML = renderTable(ranked, tabType);

container.innerHTML += `
  <div class="card mb-3">
    <div class="card-header bg-white collapsed" id="${headerId}" data-bs-toggle="collapse" data-bs-target="#${collapseId}" aria-expanded="${i === 0 ? 'true' : 'false'}" aria-controls="${collapseId}">
      <div class="d-flex justify-content-between align-items-center">
        <span><i class="fas ${card.icon} me-2"></i>${card.title}</span>
        <span class="badge bg-primary rounded-pill">
          ${card.isAverage && card.delayField
            ? (
                filtered.reduce((sum, d) => {
                  const val = parseFloat(d[card.delayField]);
                  return !isNaN(val) ? sum + val : sum;
                }, 0) / filtered.filter(d => !isNaN(parseFloat(d[card.delayField]))).length
              ).toFixed(1)
            : filtered.length}
        </span>
        <i class="fas fa-chevron-down"></i>
      </div>
    </div>
    <div id="${collapseId}" class="collapse" aria-labelledby="${headerId}">
      <div class="card-body p-0">
        ${tableHTML}
      </div>
    </div>
  </div>`;

  });

  // Add event listeners for rotating chevrons
  const toggles = container.querySelectorAll('.card-header[data-bs-toggle="collapse"]');
  toggles.forEach(toggle => {
    toggle.addEventListener('click', function() {
      this.classList.toggle('collapsed');
    });
  });
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', loadData);
</script>
</body>
</html>
