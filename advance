<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Net Balance Analytics</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.2/papaparse.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@1.1.0/dist/chartjs-plugin-annotation.min.js"></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      padding: 1rem;
      color: #333;
    }

    .app-container {
      max-width: 1400px;
      margin: 0 auto;
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      border-radius: 20px;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
      overflow: hidden;
      animation: fadeIn 0.8s ease-out;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .header {
      background: linear-gradient(135deg, #4c63d2 0%, #6b73ff 100%);
      color: white;
      padding: 1.5rem 2rem;
      position: relative;
      overflow: hidden;
    }

    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -50%;
      width: 200%;
      height: 200%;
      background: linear-gradient(45deg, transparent, rgba(255,255,255,0.1), transparent);
      animation: shine 3s infinite;
    }

    @keyframes shine {
      0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
      50% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
      100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
    }

    .header h1 {
      font-size: clamp(1.5rem, 4vw, 2.2rem);
      font-weight: 700;
      letter-spacing: -0.5px;
      position: relative;
      z-index: 1;
    }

    .controls {
      padding: 1.5rem 2rem;
      background: #f8fafc;
      border-bottom: 1px solid #e2e8f0;
      display: flex;
      align-items: center;
      gap: 1rem;
      flex-wrap: wrap;
    }

    .control-group {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      min-width: 200px;
    }

    .control-label {
      font-weight: 600;
      color: #475569;
      font-size: 0.9rem;
      white-space: nowrap;
    }

    .select-wrapper {
      position: relative;
      flex: 1;
      min-width: 150px;
    }

    select {
      width: 100%;
      padding: 0.75rem 2.5rem 0.75rem 1rem;
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      background: white;
      font-size: 0.9rem;
      font-weight: 500;
      color: #334155;
      cursor: pointer;
      transition: all 0.2s ease;
      appearance: none;
    }

    select:focus {
      outline: none;
      border-color: #4c63d2;
      box-shadow: 0 0 0 3px rgba(76, 99, 210, 0.1);
    }

    select:hover {
      border-color: #94a3b8;
    }

    .select-wrapper::after {
      content: 'â–¼';
      position: absolute;
      right: 1rem;
      top: 50%;
      transform: translateY(-50%);
      color: #64748b;
      pointer-events: none;
      font-size: 0.8rem;
    }

.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
  gap: 0.75rem;
  padding: 1rem 1.25rem;
}


    .stat-card {
      background: white;
      padding: 1.25rem;
      border-radius: 12px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
      border: 1px solid #e2e8f0;
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .stat-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    }

    .stat-value {
      font-size: 1.5rem;
      font-weight: 700;
      color: #1e293b;
      margin-bottom: 0.25rem;
    }

    .stat-label {
      font-size: 0.85rem;
      color: #64748b;
      font-weight: 500;
    }

    .chart-container {
      padding: 2rem;
      background: white;
      position: relative;
      min-height: 500px;
    }

@media (max-width: 480px) {
  .chart-wrapper {
    height: 40vh;
    min-height: 250px;
  }
}


    .loading-overlay {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(5px);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 100;
      border-radius: 12px;
    }

    .loading-spinner {
      width: 40px;
      height: 40px;
      border: 3px solid #e2e8f0;
      border-top: 3px solid #4c63d2;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-bottom: 1rem;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .loading-text {
      color: #64748b;
      font-weight: 500;
      font-size: 0.95rem;
    }

    .hidden {
      display: none;
    }

    /* Mobile optimizations */
    @media (max-width: 768px) {
      body {
        padding: 0.5rem;
      }
      
      .app-container {
        border-radius: 15px;
      }
      
.header {
  padding: 1rem 1.25rem;
}
.controls {
  padding: 1rem 1.25rem;
  gap: 0.5rem;
}

      
      .control-group {
        min-width: auto;
      }
      
      .chart-container {
        padding: 1.5rem 1rem;
      }
      
      .chart-wrapper {
        height: 60vh;
        min-height: 350px;
      }
      
      .stats-grid {
        grid-template-columns: repeat(2, 1fr);
        padding: 1.25rem 1.5rem;
      }
    }

@media (max-width: 768px) {
  .stats-grid {
    grid-template-columns: repeat(2, 1fr);
    gap: 0.5rem;
  }
}

@media (max-width: 480px) {
  .stats-grid {
    grid-template-columns: 1fr;
  }

  .stat-card {
    padding: 0.75rem;
  }

  .stat-value {
    font-size: 1rem;
  }

  .stat-label {
    font-size: 0.7rem;
  }

  .chart-wrapper {
    height: 300px;
  }
}

    .stat-card {
  padding: 1rem;
  border-radius: 10px;
}
.stat-value {
  font-size: 1.2rem;
}
.stat-label {
  font-size: 0.75rem;
}

  </style>
</head>
<body>
  <div class="app-container">
    <div class="header">
      <h1>ðŸ“Š Net Balance Analytics</h1>
    </div>
    
    <div class="controls">
      <div class="control-group">
        <span class="control-label">Location</span>
        <div class="select-wrapper">
          <select id="locationFilter">
            <option value="all">All Locations</option>
            <option value="Balurghat">Balurghat</option>
            <option value="Malda">Malda</option>
            <option value="Raiganj">Raiganj</option>
            <option value="Buniadpur">Buniadpur</option>
          </select>
        </div>
      </div>
    </div>

    <div class="stats-grid">
      <div class="stat-card">
        <div class="stat-value" id="totalValue">â‚¹0</div>
        <div class="stat-label">Total Balance</div>
      </div>
      <div class="stat-card">
        <div class="stat-value" id="monthCount">0</div>
        <div class="stat-label">Active Months</div>
      </div>
<!-- Overdue >6 Months -->
<div class="stat-card">
  <div class="stat-value" id="overdue6mo">â‚¹0</div>
  <div class="stat-label">Overdue (&gt;6mo)</div>
</div>
      <div class="stat-card">
        <div class="stat-value" id="overdueValue">â‚¹0</div>
        <div class="stat-label">Overdue (>12mo)</div>
      </div>
      <!-- Overdue >24 Months -->
<div class="stat-card">
  <div class="stat-value" id="overdue24mo">â‚¹0</div>
  <div class="stat-label">Overdue (&gt;24mo)</div>
</div>
      <div class="stat-card">
  <div class="stat-value" id="topVendorValue">â‚¹0</div>
  <div class="stat-label" id="topVendorLabel">Top Vendor</div>
</div>

    </div>

    <div class="chart-container">
      <div class="loading-overlay hidden" id="loadingOverlay">
        <div class="loading-spinner"></div>
        <div class="loading-text">Loading data...</div>
      </div>
      <div class="chart-wrapper">
        <canvas id="balanceChart"></canvas>
      </div>
    </div>
  </div>

  <script>
    Chart.register(window['chartjs-plugin-annotation']);

    const sources = {
      "Balurghat": 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRooKVx76f92WX_Q3j2u4UmA1yXN2cNcwSPVqiFjyY58oTplAg_Ieze4xket4Lq3qHEuLt9js0-kU8a/pub?gid=98784562&single=true&output=csv',
      "Malda": 'https://docs.google.com/spreadsheets/d/e/2PACX-1vQHtBkI-9-cafLDNyCNtbnHX0B65dCawQHoO8oiFYQzeWBxu0u4VBXCqR5zgj5ylceF3piSl8rnholp/pub?gid=98784562&single=true&output=csv',
      "Raiganj": 'https://docs.google.com/spreadsheets/d/e/2PACX-1vR-jd3bm9BCgUKNQCgr0Lj9paLYQ9oacLPlleCHXrtV1__58NyK_w19hbC4thzgPkdHtIAAP2nrnmyC/pub?gid=98784562&single=true&output=csv',
      "Buniadpur": 'https://docs.google.com/spreadsheets/d/e/2PACX-1vTZPn6CB_cHTFVb8S5vpvaBnczj63fYMTI0RVEdMzVcQ8O6XQi5iwTbMp2xa5vsL6zHGWxezWUSehrN/pub?gid=98784562&single=true&output=csv'
    };

    let monthlyBuckets = {};
    let chart;
    let stats = { total: 0, overdue: 0, months: 0, average: 0 };
    let vendorTotals = {}; // Add at the top of loadData function
    let topVendor = { name: '', total: 0 }; // Track top vendor
    function toggleLoading(show) {
      document.getElementById('loadingOverlay').classList.toggle('hidden', !show);
    }

    function updateStats() {
      const values = Object.values(monthlyBuckets);
      const now = new Date();
      
      stats.total = values.reduce((sum, val) => sum + val, 0);
      stats.months = values.length;
      stats.average = stats.months > 0 ? stats.total / stats.months : 0;
      
stats.overdue6mo = 0;
stats.overdue12mo = 0;
stats.overdue24mo = 0;

Object.entries(monthlyBuckets).forEach(([key, value]) => {
  const [monthStr, yearStr] = key.split('/');
  const month = parseInt(monthStr) - 1;
  const year = parseInt('20' + yearStr);
  const date = new Date(year, month);
  const now = new Date();
  const diffMonths = (now.getFullYear() - date.getFullYear()) * 12 + (now.getMonth() - date.getMonth());

  if (diffMonths > 6) stats.overdue6mo += value;
  if (diffMonths > 12) stats.overdue12mo += value;
  if (diffMonths > 24) stats.overdue24mo += value;
});

      // Format large numbers properly
      document.getElementById('totalValue').textContent = `â‚¹${formatCurrency(stats.total)}`;
      document.getElementById('monthCount').textContent = stats.months;
document.getElementById('overdue6mo').textContent = `â‚¹${formatCurrency(stats.overdue6mo)}`;
document.getElementById('overdueValue').textContent = `â‚¹${formatCurrency(stats.overdue12mo)}`; // existing
document.getElementById('overdue24mo').textContent = `â‚¹${formatCurrency(stats.overdue24mo)}`;

    }

    function formatCurrency(value) {
      if (value >= 10000000) { // 1 crore
        return (value / 10000000).toFixed(1) + ' Cr';
      } else if (value >= 100000) { // 1 lakh
        return (value / 100000).toFixed(1) + ' L';
      } else if (value >= 1000) { // 1 thousand
        return (value / 1000).toFixed(1) + 'K';
      }
      return value.toLocaleString('en-IN');
    }

    function parseDate(dateStr) {
      if (!dateStr || typeof dateStr !== 'string') return null;
      const parts = dateStr.split(/[/-]/);
      if (parts.length !== 3) return null;
      const [day, month, year] = parts.map(p => parseInt(p));
      if (isNaN(day) || isNaN(month) || isNaN(year)) return null;
      return new Date(year, month - 1, day);
    }

    // Updated to return MM/YY format
    function formatMonthYear(date) {
      const month = date.getMonth() + 1; // Convert to 1-based month
      const year = date.getFullYear().toString().slice(-2); // Get last 2 digits of year
      return `${month}/${year}`;
    }

    // Cache for parsed data to avoid re-parsing
    const dataCache = new Map();
    let isDebugMode = true; // Enable debug logs to check values

    async function loadData(location) {
toggleLoading(true);
monthlyBuckets = {};
vendorTotals = {};
topVendor = { name: '', total: 0 };
      
      const urls = location === 'all' ? Object.values(sources) : [sources[location]];
      const cacheKey = location;
      
      // Check cache first
      if (dataCache.has(cacheKey)) {
        monthlyBuckets = { ...dataCache.get(cacheKey) };
        updateStats();
        renderChart();
        toggleLoading(false);
        console.log('Loaded from cache instantly!');
        return;
      }

      try {
        // Load all URLs in parallel with fetch for better performance
        const promises = urls.map(async (url) => {
          const response = await fetch(url);
          if (!response.ok) throw new Error(`HTTP ${response.status}`);
          return response.text();
        });

        const csvTexts = await Promise.all(promises);
        
        // Process all CSV data efficiently
        csvTexts.forEach((csvText, urlIndex) => {
          const results = Papa.parse(csvText, {
            header: true,
            skipEmptyLines: true,
            dynamicTyping: false,
            fastMode: false, // Disable fastMode for more accurate parsing
            skipFirstNLines: 0
          });

          if (isDebugMode && urlIndex === 0) {
            console.log(`Sample from URL ${urlIndex}:`, results.data.slice(0, 3));
            console.log('Headers:', Object.keys(results.data[0] || {}));
          }

          // Pre-determine column names once per file
          const sampleRow = results.data[0] || {};
          const balanceCol = findColumn(sampleRow, ['Net Balance Value', 'Net Balance', 'Balance Value', 'Balance']);
          const dateCol = findColumn(sampleRow, ['Issued Date', 'Issue Date', 'Date']);

          if (!balanceCol || !dateCol) {
            console.warn(`Missing columns in URL ${urlIndex}. Available:`, Object.keys(sampleRow));
            return;
          }

          console.log(`Processing ${results.data.length} rows from source ${urlIndex + 1}`);
          console.log(`Using columns: ${dateCol} and ${balanceCol}`);

          // Process all data at once instead of batching for better accuracy
          let processedCount = 0;
          let totalProcessed = 0;
          
          results.data.forEach(row => {
            const dateValue = row[dateCol];
            const balanceValue = row[balanceCol];
            
            if (!dateValue || !balanceValue || balanceValue === '') return;

            const date = parseDate(dateValue);
            if (!date) return;

            // Improved value cleaning - be more careful with number parsing
            let cleanValue = String(balanceValue).trim();
            // Remove currency symbols and commas but preserve negative signs and decimals
            cleanValue = cleanValue.replace(/[â‚¹,\s]/g, '').replace(/[^\d.-]/g, '');
            const value = parseFloat(cleanValue);
            
            if (isNaN(value)) {
              if (isDebugMode && processedCount < 5) {
                console.log(`Invalid value: "${balanceValue}" -> "${cleanValue}"`);
              }
              return;
            }

            const monthKey = formatMonthYear(date);
            monthlyBuckets[monthKey] = (monthlyBuckets[monthKey] || 0) + value;
            const vendorCol = findColumn(sampleRow, ['VendorName', 'Vendor']);
const vendorName = row[vendorCol] || 'Unknown';
vendorTotals[vendorName] = (vendorTotals[vendorName] || 0) + value;

if (vendorTotals[vendorName] > topVendor.total) {
  topVendor.name = vendorName;
  topVendor.total = vendorTotals[vendorName];
}
            processedCount++;
            totalProcessed++;
          });
          
          console.log(`Processed ${processedCount} valid rows from source ${urlIndex + 1}`);
        });

        // Cache the results
        dataCache.set(cacheKey, { ...monthlyBuckets });
        
        console.log(`Final result: ${Object.keys(monthlyBuckets).length} months from ${urls.length} sources`);
        if (isDebugMode) {
          console.log('Sample buckets:', Object.entries(monthlyBuckets).slice(0, 5));
        }
        
        updateStats();
        document.getElementById('topVendorValue').textContent = `â‚¹${formatCurrency(topVendor.total)}`;
document.getElementById('topVendorLabel').textContent = `Top Vendor: ${topVendor.name}`;

        renderChart();

      } catch (error) {
        console.error("Loading error:", error);
      } finally {
        toggleLoading(false);
      }
    }

    function findColumn(row, candidates) {
      for (const candidate of candidates) {
        if (row.hasOwnProperty(candidate)) return candidate;
        // Case-insensitive search
        const key = Object.keys(row).find(k => k.toLowerCase() === candidate.toLowerCase());
        if (key) return key;
      }
      return null;
    }

    function renderChart() {
      // Sort labels chronologically from latest to earliest (right to left)
      const labels = Object.keys(monthlyBuckets).sort((a, b) => {
        const [ma, ya] = a.split('/').map(n => parseInt(n));
        const [mb, yb] = b.split('/').map(n => parseInt(n));
        const da = new Date(2000 + ya, ma - 1); // Convert to full year and 0-based month
        const db = new Date(2000 + yb, mb - 1);
        return db - da; // Latest first (descending order)
      });

      if (labels.length === 0) {
        console.warn('No data to display');
        return;
      }

      const now = new Date();
      const data = labels.map(label => monthlyBuckets[label]);

      // Pre-calculate colors for better performance
      const colors = labels.map(label => {
        const [monthStr, yearStr] = label.split('/');
        const month = parseInt(monthStr) - 1; // Convert to 0-based month
        const year = parseInt('20' + yearStr);
        const date = new Date(year, month);
        const diffMonths = (now.getFullYear() - date.getFullYear()) * 12 + (now.getMonth() - date.getMonth());
        return diffMonths > 12;
      });

      const backgroundColors = colors.map(isOverdue => isOverdue ? '#ff6b6b' : '#4c63d2');
      const borderColors = colors.map(isOverdue => isOverdue ? '#ff5252' : '#4c63d2');

      if (chart) {
        // Update existing chart instead of destroying for better performance
        chart.data.labels = labels;
        chart.data.datasets[0].data = data;
        chart.data.datasets[0].backgroundColor = backgroundColors;
        chart.data.datasets[0].borderColor = borderColors;
        chart.update('none'); // Skip animation for faster updates
        return;
      }
      
      const ctx = document.getElementById('balanceChart').getContext('2d');
      chart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [{
            label: 'Net Balance Value',
            data: data,
            backgroundColor: backgroundColors,
            borderColor: borderColors,
            borderWidth: 2,
            borderRadius: 6,
            borderSkipped: false,
          }]
        },
        options: {
          // Remove indexAxis to use default orientation (x for categories, y for values)
          responsive: true,
          maintainAspectRatio: false,
          animation: {
            duration: 400, // Reduced animation time
            easing: 'easeOutQuart'
          },
          layout: {
            padding: {
              top: 20,
              bottom: 20,
              left: 10,
              right: 10
            }
          },
          plugins: {
            legend: { 
              display: false 
            },
            tooltip: {
              backgroundColor: 'rgba(0, 0, 0, 0.8)',
              titleColor: '#fff',
              bodyColor: '#fff',
              borderColor: '#4c63d2',
              borderWidth: 1,
              cornerRadius: 8,
              displayColors: false,
              callbacks: {
                title: function(context) {
                  return `${context[0].label}`;
                },
                label: function(context) {
                  const value = context.raw;
                  const labelIndex = context.dataIndex;
                  const status = colors[labelIndex] ? ' (Overdue)' : ' (Current)';
                  return `â‚¹${formatCurrency(value)}${status}`;
                }
              }
            }
          },
          scales: {
            x: {
              grid: {
                display: false
              },
              ticks: {
                color: '#334155',
                font: {
                  size: 12,
                  weight: '600'
                },
                maxRotation: 90, // Make labels vertical
                minRotation: 90
              }
            },
            y: {
              beginAtZero: true,
              grid: {
                color: '#f1f5f9',
                drawBorder: false
              },
              ticks: {
                color: '#64748b',
                font: {
                  size: 12,
                  weight: '500'
                },
                callback: function(value) {
                  return `â‚¹${formatCurrency(value)}`;
                }
              }
            }
          }
        }
      });
    }

    // Debounced loading to prevent rapid fire requests
    let loadTimeout;
    document.getElementById("locationFilter").addEventListener("change", e => {
      clearTimeout(loadTimeout);
      loadTimeout = setTimeout(() => loadData(e.target.value), 100);
    });

    // Initial load
    loadData('all');
  </script>
</body>
</html>
